{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","left","right","index","console","log","pivot","temp","partition","getHeapSortAnimations","n","heapify","heapSort","largest","l","r","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","doBubble","getBubbleSortAnimations","currentBarValue","getElementById","value","currentSpeedValue","class","src","crossorigin","onClick","mergeSort","quickSort","bubbleSort","icon","faHashtag","sliderArrayUpdate","type","faTachometerAlt","sliderSpeedUpdate","map","idx","className","id","href","faGithub","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.79818688.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array. Dont swap\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array. swap\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    quickSortHelper(array.slice(), 0, array.length-1, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function quickSortHelper(\r\n    mainArray,\r\n    left,\r\n    right,\r\n    animations\r\n  ) {\r\n    console.log(mainArray);\r\n    var index;\r\n    if (mainArray.length > 1) {\r\n        index = partition(mainArray, left, right, animations); //index returned from partition\r\n        if (left < index - 1) { //more elements on the left side of the pivot\r\n            quickSortHelper(mainArray, left, index - 1, animations);\r\n        }\r\n        if (index < right) { //more elements on the right side of the pivot\r\n            quickSortHelper(mainArray, index, right, animations);\r\n        }\r\n    }\r\n    console.log(mainArray);\r\n    //return items;\r\n  }\r\n\r\n  function partition(mainArray, left, right, animations) {\r\n    var pivot   = mainArray[Math.floor((right + left) / 2)], //middle element\r\n        i       = left, //left pointer\r\n        j       = right; //right pointer\r\n    while (i <= j) {\r\n        while (mainArray[i] < pivot) {\r\n            i++;\r\n        }\r\n        while (mainArray[j] > pivot) {\r\n            j--;\r\n        }\r\n\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n\r\n        if (i <= j) {\r\n          let temp = mainArray[i];\r\n          animations.push([i, mainArray[j]]);\r\n          animations.push([i, j]);\r\n          animations.push([i, j]);\r\n          mainArray[i] = mainArray[j];\r\n          animations.push([j, temp]);\r\n          mainArray[j] = temp; //swpping two elements\r\n            i++;\r\n            j--;\r\n        }\r\n\r\n        else {\r\n\r\n          animations.push([i, mainArray[i]]);\r\n          animations.push([i, j]);\r\n          animations.push([i, j]);\r\n          animations.push([j, mainArray[j]]);\r\n\r\n        }\r\n    }\r\n    return i;\r\n  }\r\n\r\nexport function getHeapSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    heapSort(array.slice(), animations);\r\n    return animations;\r\n  }\r\n\r\n  function heapSort(mainArray, animations)\r\n    {\r\n        var n = mainArray.length;\r\n \r\n        // Build heap (rearrange array)\r\n        for (var i = Math.floor(n / 2) - 1; i >= 0; i--)\r\n            heapify(mainArray, n, i, animations);\r\n \r\n        // One by one extract an element from heap\r\n        for (var i = n - 1; i > 0; i--) {\r\n            // Move current root to end\r\n            var temp = mainArray[0];\r\n            mainArray[0] = mainArray[i];\r\n            mainArray[i] = temp;\r\n\r\n            animations.push([i, n-1]);\r\n            animations.push([i, n-1]);\r\n            animations.push([i, temp]);\r\n            animations.push([i, n-1]);\r\n            animations.push([i, n-1]);\r\n            animations.push([0, mainArray[i]]);\r\n \r\n            // call max heapify on the reduced heap\r\n            heapify(mainArray, i, 0, animations);\r\n        }\r\n    }\r\n \r\n    // To heapify a subtree rooted with node i which is\r\n    // an index in mainArray[]. n is size of heap\r\n    function heapify(mainArray, n, i, animations)\r\n    {\r\n        var largest = i; // Initialize largest as root\r\n        var l = 2 * i + 1; // left = 2*i + 1\r\n        var r = 2 * i + 2; // right = 2*i + 2\r\n \r\n        // If left child is larger than root\r\n        if (l < n && mainArray[l] > mainArray[largest])\r\n            largest = l;\r\n \r\n        // If right child is larger than largest so far\r\n        if (r < n && mainArray[r] > mainArray[largest])\r\n            largest = r;\r\n \r\n        // If largest is not root\r\n        if (largest != i) {\r\n            var temp = mainArray[i];\r\n            mainArray[i] = mainArray[largest];\r\n            mainArray[largest] = temp;\r\n\r\n            animations.push([largest, i]);\r\n            animations.push([largest, i]);\r\n            animations.push([largest, temp]);\r\n            animations.push([largest, i]);\r\n            animations.push([largest, i]);\r\n            animations.push([i, mainArray[i]]);\r\n \r\n            // Recursively heapify the affected sub-tree\r\n            heapify(mainArray, n, largest, animations);\r\n        }\r\n    }\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  doBubble(array, animations);\r\n  return animations;\r\n\r\n}\r\n  function doBubble(mainArray, animations)\r\n  {\r\n\r\n    //console.log(\"Before Sorting\");\r\n    //console.log(auxiliaryArray);\r\n\r\n    for (let i = 0; i < mainArray.length; i++) {\r\n      for (let j = 1; j < mainArray.length-i; j++) {\r\n        let k = i;\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color. These work\r\n        animations.push([j-1, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color. These work\r\n        animations.push([j-1, j]);\r\n        \r\n        if (mainArray[j - 1] > mainArray[j]) {\r\n          //console.log(mainArray[j-1] + \"is bigger than\" + mainArray[j]);\r\n          let temp = mainArray[j-1];\r\n\r\n          animations.push([j, temp]);\r\n          animations.push([j-1, j]);\r\n          animations.push([j-1, j]);\r\n          animations.push([j-1, mainArray[j]]);\r\n\r\n          mainArray[j-1] = mainArray[j];\r\n          mainArray[j] = temp;\r\n\r\n          \r\n          \r\n        }\r\n\r\n        else {\r\n          //console.log(mainArray[j-1] + \"is smaller than\" + mainArray[j]);\r\n          animations.push([j-1, mainArray[j-1]]);\r\n          animations.push([j-1, j]);\r\n          animations.push([j-1, j]);\r\n          animations.push([j, mainArray[j]]);\r\n          //mainArray[j-1] = auxiliaryArray[j];\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"After Sorting\");\r\n    //console.log(mainArray);\r\n\r\n  }\r\n","import { faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport { faHashtag, faTachometerAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react'\r\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getQuickSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport {getHeapSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\r\nimport './SortingVisualizer.css'\r\n\r\n// Change this value for the speed of the animations.\r\nlet ANIMATION_SPEED_MS = 10;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nlet NUMBER_OF_ARRAY_BARS =100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#66FCF1';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() { // This will run everytime page is loaded\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n\r\n        const array = []; // create array\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n\r\n            array.push(radomIntFromInterval(1,800)); // push random value between 5 - 1000\r\n\r\n        }\r\n        this.setState({array});\r\n\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const isColorChange = i % 3 !== 2;\r\n        if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n        } else {\r\n            setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n        }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        //console.log(\"Animation Order\");\r\n        //console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n        //console.log(\"Animation Order\");\r\n        //console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        /* Code to check if sort checks out\r\n        for(var i = 0; i < 1000; i++)\r\n        {\r\n            const unsortedArray = this.state.array.slice();\r\n            //console.log(unsortedArray);\r\n            const sortedArr = unsortedArray.sort();\r\n            //console.log(sortedArr);\r\n            const sortedArrBubble = bubbleSort(unsortedArray);\r\n            //console.log(unsortedArray);\r\n            console.log(arraysAreEqual(sortedArr, sortedArrBubble));\r\n            this.resetArray();\r\n        } */\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        //console.log(\"Animation Order\");\r\n        //console.log(animations);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                const [barOneIdx, newHeight] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    sliderArrayUpdate() {\r\n\r\n        var slider = document.getElementById(\"arrayRange\");\r\n        var currentBarValue = slider.value;\r\n        NUMBER_OF_ARRAY_BARS = currentBarValue;\r\n        //console.log(currentBarValue);\r\n        this.resetArray();\r\n\r\n    }\r\n\r\n    sliderSpeedUpdate() {\r\n\r\n        var slider = document.getElementById(\"speedRange\");\r\n        var currentSpeedValue = slider.value;\r\n        ANIMATION_SPEED_MS = currentSpeedValue;\r\n        //console.log(currentSpeedValue);\r\n        this.resetArray();\r\n\r\n    }\r\n\r\n    \r\n    render() {\r\n\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            \r\n            <div class=\"array-container\">\r\n                <head>\r\n                <script src=\"https://kit.fontawesome.com/e881289764.js\" crossorigin=\"anonymous\"></script>\r\n                </head>\r\n                <div class = \"nav-bar\">\r\n                    <ul>\r\n                        \r\n                        <li><a class = \"button1 reset\" onClick={() => this.resetArray()}>Generate New Array</a></li>\r\n                        <div class = \"sorting-buttons\">\r\n                            <li><a class = \"button1\" onClick={() => this.mergeSort()}>Merge Sort</a></li>\r\n                            <li><a class = \"button1\" onClick={() => this.quickSort()}>Quick Sort</a></li>\r\n                            <li><a class = \"button1\" onClick={() => this.heapSort()}>Heap Sort</a></li>\r\n                            <li><a class = \"button1\" onClick={() => this.bubbleSort()}>Bubble Sort</a></li>\r\n                        </div>\r\n                        <li>\r\n                            <FontAwesomeIcon icon = {faHashtag} style = {{color: 'white'}}></FontAwesomeIcon>\r\n                            <input class=\"slidecontainer\" onClick={() => this.sliderArrayUpdate()} type=\"range\" min=\"5\" max=\"100\" class=\"slider\" id=\"arrayRange\"></input></li>\r\n                        <li>\r\n                            <FontAwesomeIcon icon = {faTachometerAlt} style = {{color: 'white'}}></FontAwesomeIcon>\r\n                            <input class=\"slidecontainer\" onClick={() => this.sliderSpeedUpdate()} type=\"range\" min=\"1\" max=\"100\" class=\"slider\" id=\"speedRange\"></input></li>\r\n                    </ul>\r\n\r\n                    \r\n                </div>\r\n            \r\n                {array.map((value, idx) => (\r\n                    <div \r\n                        className=\"array-bar\" \r\n                        key={idx}\r\n                        style={{height: `${value}px`}}></div>\r\n                ))}\r\n\r\n                <section id=\"footer\">\r\n                    <h3>Sorting Algorithm Visualizer <a href = \"https://theoneandonlyone.github.io/\"><FontAwesomeIcon icon = { faGithub } style = {{color: 'white'}}></FontAwesomeIcon></a></h3>\r\n                    \r\n                </section>\r\n\r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nfunction radomIntFromInterval(min, max) {\r\n\r\n    return Math.floor(Math.random() * (max -min +1) + min);\r\n\r\n} \r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n      if (arrayOne[i] !== arrayTwo[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n","import './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHashtag } from '@fortawesome/free-solid-svg-icons';\nimport { faTachometerAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}